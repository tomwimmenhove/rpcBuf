#include <utility>
#include <type_traits>
#include <iostream>

#include <tuple>
#include <iostream>


#include <utility>

using std::cout;
using std::endl;

double foo(int x, float y, double z)
{
	return x + y + z;
}

template <typename T, typename ...Args>
struct call_tuple_args
{
	std::tuple<Args...> params;
	T (*func)(Args...);

	T operator()()
	{
		return callFunc(std::make_index_sequence<sizeof...(Args)>{});
	}

	template<typename U, U... ints>
	T callFunc(std::integer_sequence<U, ints...>)
	{
		return func(std::get<ints>(params) ...);
	}
};

int main(void)
{
	std::tuple<int, float, double> t = std::make_tuple(1, (float)1.2, 5);
	call_tuple_args<double, int, float, double> saved{ t, foo };
	cout << saved() << endl;
	return 0;
}

struct args
{
	int a;
	int b;
	int c;
};

template<typename T, typename U, typename... Args>
T call_out(Args&&... args)
{
	int return_len;

	if constexpr (!std::is_same<T, void>::value)
	{
		return_len = sizeof(T);
	}
	else
	{
		return_len = 0;
	}

	char ret[return_len];
	T* retp = (T*)ret;

	U a = {std::forward<Args>(args)...};

	*retp = a.b;

	if constexpr (!std::is_same<T, void>::value)
	{
		return *(T*)ret;
	}
}

int mainiac()
{
	int r = call_out<int, args>(5, 6, 7);
	
	std::cout << r << '\n';

	return 0;
}

